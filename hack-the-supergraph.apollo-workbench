{
  "graphName": "hack-the-supergraph",
  "operations": {},
  "queryPlans": {},
  "schemas": {
    "products": {
      "sdl": "extend schema @link(url: \"https://specs.apollo.dev/federation/v2.0\", import: [\"@key\", \"@shareable\"])\n\ntype Query {\n  \"\"\"\n  Get all available products to shop for. Optionally provide some search filters\n  \"\"\"\n  searchProducts(searchInput: ProductSearchInput! = {}): [Product]\n  \"\"\"\n  Get a specific product by id. Useful for the product details page or checkout page\n  \"\"\"\n  product(id: ID!): Product\n}\n\n\"\"\"Search filters for when returning Products\"\"\"\ninput ProductSearchInput {\n  titleStartsWith: String\n}\n\n\"\"\"\nA specific product sold by our store. This contains all the high level details but is not the purchasable item.\n\"\"\"\ntype Product @key(fields: \"id\") {\n  id: ID!\n  title: String\n  description: String\n  mediaUrl: String\n  weight: Float\n}\n\ntype Money @shareable {\n  amount: Float\n  currency: String\n}",
      "autoUpdateSchemaFromUrl": false
    },
    "users": {
      "sdl": "extend schema\n  @link(url: \"https://specs.apollo.dev/federation/v2.0\", import: [\"@key\"])\n\ntype Query {\n  \"\"\"\n  Get the current user from our fake \"auth\" headers\n  Set the \"x-user-id\" header to the user id.\n  \"\"\"\n  viewer: User\n}\n\n\"\"\"\nAn user account in our system\n\"\"\"\ntype User @key(fields: \"id\") {\n  id: ID!\n\n  \"\"\"\n  The users login username\n  \"\"\"\n  username: String!\n\n  \"\"\"\n  The user's active cart session. Once the cart items have been purchases, they transition to an Order\n  \"\"\"\n  cart: Cart\n\n  \"\"\"\n  The users previous purchases\n  \"\"\"\n  orders(filters: OrderFilters): [Order]\n\n  \"\"\"\n  The users current saved shipping address\n  \"\"\"\n  shippingAddress: String\n}\n\n\"\"\"\nSearch filters for when showing an users previous purchases\n\"\"\"\ninput OrderFilters {\n  orderId: ID!\n  priceHigh: Float\n  priceLow: Float\n  itemsInOrder: Int\n}\n\n\"\"\"\nAn user's saved cart session. Only one cart can be active at a time\n\"\"\"\ntype Cart {\n  \"\"\"\n  Items saved in the cart session\n  \"\"\"\n  items: [Product]\n\n  \"\"\"\n  The current total of all the items in the cart, before taxes and shipping\n  \"\"\"\n  subtotal: Float\n}\n\ntype Order @key(fields: \"id\", resolvable: false) {\n  id: ID!\n}\n\ntype Product @key(fields: \"id\", resolvable: false) {\n  id: ID!\n}",
      "autoUpdateSchemaFromUrl": false
    },
    "orders": {
      "sdl": "extend schema @link(url: \"https://specs.apollo.dev/federation/v2.0\", import: [\"@key\", \"@shareable\"])\n\ntype Query {\n  \"\"\"\n  Get a specific order by id. Meant to be used for a detailed view of an order\n  \"\"\"\n  order(id: ID!): Order\n}\n\n\"\"\"Returns information about a specific purchase\"\"\"\ntype Order @key(fields: \"id\") {\n  \"\"\"\n  Each order has a unique id which is separate from the user or items they bought\n  \"\"\"\n  id: ID!\n  \"\"\"The user who made the purchase\"\"\"\n  buyer: User!\n  \"\"\"A list of all the items they purchased. \"\"\"\n  items: [Product!]!\n  total: Money\n}\n\ntype User @key(fields: \"id\", resolvable: false) {\n  id: ID!\n}\n\ntype Product @key(fields: \"id\", resolvable: false) {\n  id: ID!\n}\n\ntype Money @shareable {\n  amount: Float\n  currency: String\n}",
      "autoUpdateSchemaFromUrl": false
    },
    "shipping": {
      "sdl": "extend schema\n  @link(url: \"https://specs.apollo.dev/federation/v2.0\", import: [\"@key\", \"@external\", \"@requires\"])\n\ntype Order @key(fields: \"id\") {\n  id: ID!\n  buyer: User! @external\n  items: [Product!]! @external\n\n  \"\"\"\n  Calculate the cost to ship all the variants to the users address\n  \"\"\"\n  shippingCost: Float @requires(fields: \"items { weight } buyer { shippingAddress }\")\n}\n\ntype User @key(fields: \"id\", resolvable: false) {\n  id: ID!\n  shippingAddress: String @external\n}\n\ntype Product @key(fields: \"id\", resolvable: false) {\n  id: ID!\n  weight: Float @external\n}",
      "autoUpdateSchemaFromUrl": false
    }
  },
  "supergraphSdl": "schema\n  @link(url: \"https://specs.apollo.dev/link/v1.0\")\n  @link(url: \"https://specs.apollo.dev/join/v0.2\", for: EXECUTION)\n{\n  query: Query\n}\n\ndirective @join__field(graph: join__Graph!, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, usedOverridden: Boolean) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION\n\ndirective @join__graph(name: String!, url: String!) on ENUM_VALUE\n\ndirective @join__implements(graph: join__Graph!, interface: String!) repeatable on OBJECT | INTERFACE\n\ndirective @join__type(graph: join__Graph!, key: join__FieldSet, extension: Boolean! = false, resolvable: Boolean! = true) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR\n\ndirective @link(url: String, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA\n\n\"\"\"An user's saved cart session. Only one cart can be active at a time\"\"\"\ntype Cart\n  @join__type(graph: USERS)\n{\n  \"\"\"Items saved in the cart session\"\"\"\n  items: [Product]\n\n  \"\"\"\n  The current total of all the items in the cart, before taxes and shipping\n  \"\"\"\n  subtotal: Float\n}\n\nscalar join__FieldSet\n\nenum join__Graph {\n  ORDERS @join__graph(name: \"orders\", url: \"http://localhost\")\n  PRODUCTS @join__graph(name: \"products\", url: \"http://localhost\")\n  SHIPPING @join__graph(name: \"shipping\", url: \"http://localhost\")\n  USERS @join__graph(name: \"users\", url: \"http://localhost\")\n}\n\nscalar link__Import\n\nenum link__Purpose {\n  \"\"\"\n  `SECURITY` features provide metadata necessary to securely resolve fields.\n  \"\"\"\n  SECURITY\n\n  \"\"\"\n  `EXECUTION` features provide metadata necessary for operation execution.\n  \"\"\"\n  EXECUTION\n}\n\ntype Money\n  @join__type(graph: ORDERS)\n  @join__type(graph: PRODUCTS)\n{\n  amount: Float\n  currency: String\n}\n\n\"\"\"Returns information about a specific purchase\"\"\"\ntype Order\n  @join__type(graph: ORDERS, key: \"id\")\n  @join__type(graph: SHIPPING, key: \"id\")\n  @join__type(graph: USERS, key: \"id\", resolvable: false)\n{\n  \"\"\"\n  Each order has a unique id which is separate from the user or items they bought\n  \"\"\"\n  id: ID!\n\n  \"\"\"The user who made the purchase\"\"\"\n  buyer: User! @join__field(graph: ORDERS) @join__field(graph: SHIPPING, external: true)\n\n  \"\"\"A list of all the items they purchased. \"\"\"\n  items: [Product!]! @join__field(graph: ORDERS) @join__field(graph: SHIPPING, external: true)\n  total: Money @join__field(graph: ORDERS)\n\n  \"\"\"Calculate the cost to ship all the variants to the users address\"\"\"\n  shippingCost: Float @join__field(graph: SHIPPING, requires: \"items { weight } buyer { shippingAddress }\")\n}\n\n\"\"\"Search filters for when showing an users previous purchases\"\"\"\ninput OrderFilters\n  @join__type(graph: USERS)\n{\n  orderId: ID!\n  priceHigh: Float\n  priceLow: Float\n  itemsInOrder: Int\n}\n\n\"\"\"\nA specific product sold by our store. This contains all the high level details but is not the purchasable item.\n\"\"\"\ntype Product\n  @join__type(graph: ORDERS, key: \"id\", resolvable: false)\n  @join__type(graph: PRODUCTS, key: \"id\")\n  @join__type(graph: SHIPPING, key: \"id\", resolvable: false)\n  @join__type(graph: USERS, key: \"id\", resolvable: false)\n{\n  id: ID!\n  title: String @join__field(graph: PRODUCTS)\n  description: String @join__field(graph: PRODUCTS)\n  mediaUrl: String @join__field(graph: PRODUCTS)\n  weight: Float @join__field(graph: PRODUCTS) @join__field(graph: SHIPPING, external: true)\n}\n\n\"\"\"Search filters for when returning Products\"\"\"\ninput ProductSearchInput\n  @join__type(graph: PRODUCTS)\n{\n  titleStartsWith: String\n}\n\ntype Query\n  @join__type(graph: ORDERS)\n  @join__type(graph: PRODUCTS)\n  @join__type(graph: SHIPPING)\n  @join__type(graph: USERS)\n{\n  \"\"\"\n  Get a specific order by id. Meant to be used for a detailed view of an order\n  \"\"\"\n  order(id: ID!): Order @join__field(graph: ORDERS)\n\n  \"\"\"\n  Get all available products to shop for. Optionally provide some search filters\n  \"\"\"\n  searchProducts(searchInput: ProductSearchInput! = {}): [Product] @join__field(graph: PRODUCTS)\n\n  \"\"\"\n  Get a specific product by id. Useful for the product details page or checkout page\n  \"\"\"\n  product(id: ID!): Product @join__field(graph: PRODUCTS)\n\n  \"\"\"\n  Get the current user from our fake \"auth\" headers\n  Set the \"x-user-id\" header to the user id.\n  \"\"\"\n  viewer: User @join__field(graph: USERS)\n}\n\n\"\"\"An user account in our system\"\"\"\ntype User\n  @join__type(graph: ORDERS, key: \"id\", resolvable: false)\n  @join__type(graph: SHIPPING, key: \"id\", resolvable: false)\n  @join__type(graph: USERS, key: \"id\")\n{\n  id: ID!\n\n  \"\"\"The users current saved shipping address\"\"\"\n  shippingAddress: String @join__field(graph: SHIPPING, external: true) @join__field(graph: USERS)\n\n  \"\"\"The users login username\"\"\"\n  username: String! @join__field(graph: USERS)\n\n  \"\"\"\n  The user's active cart session. Once the cart items have been purchases, they transition to an Order\n  \"\"\"\n  cart: Cart @join__field(graph: USERS)\n\n  \"\"\"The users previous purchases\"\"\"\n  orders(filters: OrderFilters): [Order] @join__field(graph: USERS)\n}",
  "federation": "2"
}